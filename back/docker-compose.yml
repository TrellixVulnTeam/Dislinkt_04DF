version: "3.8"

services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      JAEGER_SERVICE_NAME: user-service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    depends_on:
      - user_db
      - jaeger
    networks:
      - network
      - public
      
  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: on-failure
    environment:
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      JAEGER_SERVICE_NAME: post-service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    depends_on:
      - post_db
      - jaeger
    networks:
      - network
      - public

  message_service:
    image: message_service
    container_name: message_service
    build:
      context: .
      dockerfile: ./message_service/Dockerfile
    restart: on-failure
    environment:
      MESSAGE_DB_HOST: ${MESSAGE_DB_HOST}
      MESSAGE_DB_PORT: ${MESSAGE_DB_PORT}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
    depends_on:
      - message_db
    networks:
      - network

  job_service:
    image: job_service
    container_name: job_service
    build:
      context: .
      dockerfile: ./job_service/Dockerfile
    restart: on-failure
    environment:
      JOB_DB_HOST: ${JOB_DB_HOST}
      JOB_DB_PORT: ${JOB_DB_PORT}
      JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
      JAEGER_SERVICE_NAME: job-service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    depends_on:
      - job_db
      - jaeger
    networks:
      - network
      - public

  notification_service:
    image: notification_service
    container_name: notification_service
    build:
      context: .
      dockerfile: ./notification_service/Dockerfile
    restart: on-failure
    environment:
      NOTIFICATION_DB_HOST: ${NOTIFICATION_DB_HOST}
      NOTIFICATION_DB_PORT: ${NOTIFICATION_DB_PORT}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
    depends_on:
      - notification_db
    networks:
      - network

  authentification_service:
    image: authentification_service
    container_name: authentification_service
    build:
      context: .
      dockerfile: ./authentification_service/Dockerfile
    restart: on-failure
    environment:
      AUTHENTIFICATION_DB_HOST: ${AUTHENTIFICATION_DB_HOST}
      AUTHENTIFICATION_DB_PORT: ${AUTHENTIFICATION_DB_PORT}
      AUTHENTIFICATION_SERVICE_PORT: ${AUTHENTIFICATION_SERVICE_PORT}
      JAEGER_SERVICE_NAME: authentification-service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    depends_on:
      - authentification_db
      - jaeger
    networks:
      - network
      - public

  user_suggestions_service:
    image: user_suggestions_service
    container_name: user_suggestions_service
    build:
      context: .
      dockerfile: ./user_suggestions_service/Dockerfile
    restart: on-failure
    environment:
        - USER_SUGGESTIONS_DB_HOST=${USER_SUGGESTIONS_DB_HOST}
        - USER_SUGGESTIONS_DB_PORT=${USER_SUGGESTIONS_DB_PORT}
        - USER_SUGGESTIONS_SERVICE_PORT=${USER_SUGGESTIONS_SERVICE_PORT}
        - USER_SUGGESTIONS_DB_USER=${USER_SUGGESTIONS_DB_USER}
        - USER_SUGGESTIONS_DB_PASS=${USER_SUGGESTIONS_DB_PASS}
        - JAEGER_SERVICE_NAME= user-suggestions-service
        - JAEGER_AGENT_HOST=${JAEGER_AGENT_HOST}
        - JAEGER_AGENT_PORT=${JAEGER_AGENT_PORT}
        - JAEGER_SAMPLER_MANAGER_HOST_PORT=${JAEGER_SAMPLER_MANAGER_HOST_PORT}
        - JAEGER_SAMPLER_TYPE=${JAEGER_SAMPLER_TYPE}
        - JAEGER_SAMPLER_PARAM=${JAEGER_SAMPLER_PARAM}
    depends_on:
      - neo4j
      - jaeger
    networks:
      - network
      - public

  job_suggestions_service:
    image: job_suggestions_service
    container_name: job_suggestions_service
    build:
      context: .
      dockerfile: ./job_suggestions_service/Dockerfile
    restart: on-failure
    environment:
        - JOB_SUGGESTIONS_DB_HOST=${JOB_SUGGESTIONS_DB_HOST}
        - JOB_SUGGESTIONS_DB_PORT=${JOB_SUGGESTIONS_DB_PORT}
        - JOB_SUGGESTIONS_SERVICE_PORT=${JOB_SUGGESTIONS_SERVICE_PORT}
        - JOB_SUGGESTIONS_DB_USER=${JOB_SUGGESTIONS_DB_USER}
        - JOB_SUGGESTIONS_DB_PASS=${JOB_SUGGESTIONS_DB_PASS}
        - JAEGER_SERVICE_NAME= job-suggestions-service
        - JAEGER_AGENT_HOST=${JAEGER_AGENT_HOST}
        - JAEGER_AGENT_PORT=${JAEGER_AGENT_PORT}
        - JAEGER_SAMPLER_MANAGER_HOST_PORT=${JAEGER_SAMPLER_MANAGER_HOST_PORT}
        - JAEGER_SAMPLER_TYPE=${JAEGER_SAMPLER_TYPE}
        - JAEGER_SAMPLER_PARAM=${JAEGER_SAMPLER_PARAM}
    depends_on:
      - neo4ja
      - jaeger
    networks:
      - network
      - public


  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      AUTHENTIFICATION_SERVICE_HOST: ${AUTHENTIFICATION_SERVICE_HOST}
      AUTHENTIFICATION_SERVICE_PORT: ${AUTHENTIFICATION_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      MESSAGE_SERVICE_HOST: ${MESSAGE_SERVICE_HOST}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      JOB_SERVICE_HOST: ${JOB_SERVICE_HOST}
      JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
      USER_SUGGESTIONS_SERVICE_HOST: ${USER_SUGGESTIONS_SERVICE_HOST}
      USER_SUGGESTIONS_SERVICE_PORT: ${USER_SUGGESTIONS_SERVICE_PORT}
      JOB_SUGGESTIONS_SERVICE_HOST: ${JOB_SUGGESTIONS_SERVICE_HOST}
      JOB_SUGGESTIONS_SERVICE_PORT: ${JOB_SUGGESTIONS_SERVICE_PORT}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
    networks:
      - network

  message_db:
    image: mongo
    container_name: message_db
    restart: on-failure
    networks:
      - network

  job_db:
    image: mongo
    container_name: job_db
    restart: on-failure
    networks:
      - network

  notification_db:
    image: mongo
    container_name: notification_db
    restart: on-failure
    networks:
      - network

  authentification_db:
    image: mongo
    container_name: authentification_db
    restart: on-failure
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

  neo4j:
    image: neo4j:4.3.3-community
    container_name: neo4j
    ports:
      - "27474:7474"
      - "27687:7687"
    networks:
      - network
    environment:
      - NEO4J_AUTH=none
      - NEO4J_dbms_memory_pagecache_size=512M

  neo4ja:
    image: neo4j:4.3.3-community
    container_name: neo4ja
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - network
    environment:
      - NEO4J_AUTH=none
      - NEO4J_dbms_memory_pagecache_size=512M

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - public

networks:
  network:
    driver: bridge
  public:
    name: public