// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package job_suggestions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobSuggestionsServiceClient is the client API for JobSuggestionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobSuggestionsServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type jobSuggestionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSuggestionsServiceClient(cc grpc.ClientConnInterface) JobSuggestionsServiceClient {
	return &jobSuggestionsServiceClient{cc}
}

func (c *jobSuggestionsServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/job_suggestions.JobSuggestionsService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSuggestionsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/job_suggestions.JobSuggestionsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSuggestionsServiceServer is the server API for JobSuggestionsService service.
// All implementations must embed UnimplementedJobSuggestionsServiceServer
// for forward compatibility
type JobSuggestionsServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedJobSuggestionsServiceServer()
}

// UnimplementedJobSuggestionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobSuggestionsServiceServer struct {
}

func (*UnimplementedJobSuggestionsServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedJobSuggestionsServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedJobSuggestionsServiceServer) mustEmbedUnimplementedJobSuggestionsServiceServer() {
}

func RegisterJobSuggestionsServiceServer(s *grpc.Server, srv JobSuggestionsServiceServer) {
	s.RegisterService(&_JobSuggestionsService_serviceDesc, srv)
}

func _JobSuggestionsService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSuggestionsServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_suggestions.JobSuggestionsService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSuggestionsServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSuggestionsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSuggestionsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_suggestions.JobSuggestionsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSuggestionsServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobSuggestionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "job_suggestions.JobSuggestionsService",
	HandlerType: (*JobSuggestionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _JobSuggestionsService_Register_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _JobSuggestionsService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/job_suggestions_service/job_suggestions_service.proto",
}
