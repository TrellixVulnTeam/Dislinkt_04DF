// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	SearchByUser(ctx context.Context, in *SearchByUserRequest, opts ...grpc.CallOption) (*SearchByUserResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	SearchByDescription(ctx context.Context, in *SearchByDescriptionRequest, opts ...grpc.CallOption) (*SearchByDescriptionResponse, error)
	SearchByPosition(ctx context.Context, in *SearchByPositionRequest, opts ...grpc.CallOption) (*SearchByPositionResponse, error)
	SearchByRequirements(ctx context.Context, in *SearchByRequirementsRequest, opts ...grpc.CallOption) (*SearchByRequirementsResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) SearchByUser(ctx context.Context, in *SearchByUserRequest, opts ...grpc.CallOption) (*SearchByUserResponse, error) {
	out := new(SearchByUserResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/SearchByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) SearchByDescription(ctx context.Context, in *SearchByDescriptionRequest, opts ...grpc.CallOption) (*SearchByDescriptionResponse, error) {
	out := new(SearchByDescriptionResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/SearchByDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) SearchByPosition(ctx context.Context, in *SearchByPositionRequest, opts ...grpc.CallOption) (*SearchByPositionResponse, error) {
	out := new(SearchByPositionResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/SearchByPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) SearchByRequirements(ctx context.Context, in *SearchByRequirementsRequest, opts ...grpc.CallOption) (*SearchByRequirementsResponse, error) {
	out := new(SearchByRequirementsResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/SearchByRequirements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := c.cc.Invoke(ctx, "/job.JobService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	SearchByUser(context.Context, *SearchByUserRequest) (*SearchByUserResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	SearchByDescription(context.Context, *SearchByDescriptionRequest) (*SearchByDescriptionResponse, error)
	SearchByPosition(context.Context, *SearchByPositionRequest) (*SearchByPositionResponse, error)
	SearchByRequirements(context.Context, *SearchByRequirementsRequest) (*SearchByRequirementsResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Edit(context.Context, *EditRequest) (*EditResponse, error)
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (*UnimplementedJobServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedJobServiceServer) SearchByUser(context.Context, *SearchByUserRequest) (*SearchByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByUser not implemented")
}
func (*UnimplementedJobServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedJobServiceServer) SearchByDescription(context.Context, *SearchByDescriptionRequest) (*SearchByDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByDescription not implemented")
}
func (*UnimplementedJobServiceServer) SearchByPosition(context.Context, *SearchByPositionRequest) (*SearchByPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByPosition not implemented")
}
func (*UnimplementedJobServiceServer) SearchByRequirements(context.Context, *SearchByRequirementsRequest) (*SearchByRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByRequirements not implemented")
}
func (*UnimplementedJobServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedJobServiceServer) Edit(context.Context, *EditRequest) (*EditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

func RegisterJobServiceServer(s *grpc.Server, srv JobServiceServer) {
	s.RegisterService(&_JobService_serviceDesc, srv)
}

func _JobService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_SearchByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).SearchByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/SearchByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).SearchByUser(ctx, req.(*SearchByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_SearchByDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).SearchByDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/SearchByDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).SearchByDescription(ctx, req.(*SearchByDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_SearchByPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).SearchByPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/SearchByPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).SearchByPosition(ctx, req.(*SearchByPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_SearchByRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).SearchByRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/SearchByRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).SearchByRequirements(ctx, req.(*SearchByRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.JobService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "job.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _JobService_Get_Handler,
		},
		{
			MethodName: "SearchByUser",
			Handler:    _JobService_SearchByUser_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _JobService_GetAll_Handler,
		},
		{
			MethodName: "SearchByDescription",
			Handler:    _JobService_SearchByDescription_Handler,
		},
		{
			MethodName: "SearchByPosition",
			Handler:    _JobService_SearchByPosition_Handler,
		},
		{
			MethodName: "SearchByRequirements",
			Handler:    _JobService_SearchByRequirements_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _JobService_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _JobService_Edit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/job_service/job_service.proto",
}
