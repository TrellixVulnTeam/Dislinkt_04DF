// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user_suggestions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserSuggestionsServiceClient is the client API for UserSuggestionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSuggestionsServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type userSuggestionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSuggestionsServiceClient(cc grpc.ClientConnInterface) UserSuggestionsServiceClient {
	return &userSuggestionsServiceClient{cc}
}

func (c *userSuggestionsServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/user_suggestions.UserSuggestionsService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSuggestionsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/user_suggestions.UserSuggestionsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSuggestionsServiceServer is the server API for UserSuggestionsService service.
// All implementations must embed UnimplementedUserSuggestionsServiceServer
// for forward compatibility
type UserSuggestionsServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedUserSuggestionsServiceServer()
}

// UnimplementedUserSuggestionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSuggestionsServiceServer struct {
}

func (*UnimplementedUserSuggestionsServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedUserSuggestionsServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedUserSuggestionsServiceServer) mustEmbedUnimplementedUserSuggestionsServiceServer() {
}

func RegisterUserSuggestionsServiceServer(s *grpc.Server, srv UserSuggestionsServiceServer) {
	s.RegisterService(&_UserSuggestionsService_serviceDesc, srv)
}

func _UserSuggestionsService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSuggestionsServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_suggestions.UserSuggestionsService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSuggestionsServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSuggestionsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSuggestionsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_suggestions.UserSuggestionsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSuggestionsServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSuggestionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user_suggestions.UserSuggestionsService",
	HandlerType: (*UserSuggestionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserSuggestionsService_Register_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserSuggestionsService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/user_suggestions_service/user_suggestions_service.proto",
}
