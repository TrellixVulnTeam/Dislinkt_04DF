// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetMessagesBySenderAndReceiver(ctx context.Context, in *GetMessagesBySenderAndReceiverRequest, opts ...grpc.CallOption) (*GetMessagesBySenderAndReceiverResponse, error)
	GetMessagesByUsername(ctx context.Context, in *GetMessagesByUsernameRequest, opts ...grpc.CallOption) (*GetMessagesByUsernameResponse, error)
	AddNewMessage(ctx context.Context, in *AddNewMessageRequest, opts ...grpc.CallOption) (*AddNewMessageResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessagesBySenderAndReceiver(ctx context.Context, in *GetMessagesBySenderAndReceiverRequest, opts ...grpc.CallOption) (*GetMessagesBySenderAndReceiverResponse, error) {
	out := new(GetMessagesBySenderAndReceiverResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetMessagesBySenderAndReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessagesByUsername(ctx context.Context, in *GetMessagesByUsernameRequest, opts ...grpc.CallOption) (*GetMessagesByUsernameResponse, error) {
	out := new(GetMessagesByUsernameResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetMessagesByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AddNewMessage(ctx context.Context, in *AddNewMessageRequest, opts ...grpc.CallOption) (*AddNewMessageResponse, error) {
	out := new(AddNewMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/AddNewMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetMessagesBySenderAndReceiver(context.Context, *GetMessagesBySenderAndReceiverRequest) (*GetMessagesBySenderAndReceiverResponse, error)
	GetMessagesByUsername(context.Context, *GetMessagesByUsernameRequest) (*GetMessagesByUsernameResponse, error)
	AddNewMessage(context.Context, *AddNewMessageRequest) (*AddNewMessageResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (*UnimplementedMessageServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedMessageServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedMessageServiceServer) GetMessagesBySenderAndReceiver(context.Context, *GetMessagesBySenderAndReceiverRequest) (*GetMessagesBySenderAndReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesBySenderAndReceiver not implemented")
}
func (*UnimplementedMessageServiceServer) GetMessagesByUsername(context.Context, *GetMessagesByUsernameRequest) (*GetMessagesByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByUsername not implemented")
}
func (*UnimplementedMessageServiceServer) AddNewMessage(context.Context, *AddNewMessageRequest) (*AddNewMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewMessage not implemented")
}
func (*UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessagesBySenderAndReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesBySenderAndReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessagesBySenderAndReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetMessagesBySenderAndReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessagesBySenderAndReceiver(ctx, req.(*GetMessagesBySenderAndReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessagesByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessagesByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetMessagesByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessagesByUsername(ctx, req.(*GetMessagesByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AddNewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AddNewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/AddNewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AddNewMessage(ctx, req.(*AddNewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MessageService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MessageService_GetAll_Handler,
		},
		{
			MethodName: "GetMessagesBySenderAndReceiver",
			Handler:    _MessageService_GetMessagesBySenderAndReceiver_Handler,
		},
		{
			MethodName: "GetMessagesByUsername",
			Handler:    _MessageService_GetMessagesByUsername_Handler,
		},
		{
			MethodName: "AddNewMessage",
			Handler:    _MessageService_AddNewMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/message_service/message_service.proto",
}
